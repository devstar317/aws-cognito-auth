AWSTemplateFormatVersion: '2010-09-09'
Description: CognitoAPIGWAngular
Outputs:
  ApiUrl:
    Description: URL of your API endpoint
    Value:
      Fn::Join:
      - ''
      - - https://
        - Ref: CognitoDemoApi
        - .execute-api.
        - Ref: AWS::Region
        - .amazonaws.com/demo
  CognitoIdentityAuthRole:
    Description: Cognito Identity IAM Auth Role
    Value:
      Ref: GoogleRole
  CognitoIdentityPool:
    Description: Cognito Identity Pool
    Value:
      Ref: CognitoIdPool
  CognitoUserPool:
    Description: Cognito User Pool
    Value:
      Ref: CognitoUserPool
  CognitoUserPoolClient:
    Description: Cognito User Pool App
    Value:
      Ref: CognitoUserPoolClient
  CognitoUserPoolsGroupRole:
    Description: Cognito User Pools IAM Group Role
    Value:
      Ref: CUPGroupRole
  DDB:
    Description: DynamoDB Table
    Value:
      Ref: Table
  LamdbaFunction:
    Description: Lambda Function
    Value:
      Ref: CognitoDemoFunction
Resources:
  CUPGroupRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRoleWithWebIdentity
          Condition:
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr:
              - authenticated
            StringEquals:
              cognito-identity.amazonaws.com:aud:
              - Ref: CognitoIdPool
          Effect: Allow
          Principal:
            Federated:
            - cognito-identity.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action: execute-api:Invoke
            Effect: Allow
            Resource:
            - Fn::Join:
              - /
              - - Fn::Join:
                  - ':'
                  - - arn:aws:execute-api
                    - Ref: AWS::Region
                    - Ref: AWS::AccountId
                    - Ref: CognitoDemoApi
                - '*/GET/cip'
            - Fn::Join:
              - /
              - - Fn::Join:
                  - ':'
                  - - arn:aws:execute-api
                    - Ref: AWS::Region
                    - Ref: AWS::AccountId
                    - Ref: CognitoDemoApi
                - '*/POST/cip'
          Version: '2012-10-17'
        PolicyName: CognitoAPIGWAngularCIP
    Type: AWS::IAM::Role
  CognitoCIPGroup:
    Properties:
      GroupName: cip-group
      Precedence: 1
      RoleArn:
        Fn::GetAtt:
        - CUPGroupRole
        - Arn
      UserPoolId:
        Ref: CognitoUserPool
    Type: AWS::Cognito::UserPoolGroup
  CognitoDemoApi:
    Properties:
      DefinitionBody:
        basePath: /demo
        definitions:
          Empty:
            title: Empty Schema
            type: object
        info:
          title: CognitoAPIGWAngular
          version: '2017-04-26T03:23:48Z'
        paths:
          /cip:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestTemplates:
                  application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"\
                    operation\": \"list\",\n  \"payload\":{    \n      \"FilterExpression\"\
                    \ : \"userId = :this_id\",\n      \"ExpressionAttributeValues\"\
                    \ : {\":this_id\" : \"$context.identity.cognitoIdentityId\"}\n\
                    \    }\n}"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CognitoDemoFunction.Arn}/invocations
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''POST,GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: mock
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestTemplates:
                  application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"\
                    operation\": \"create\",\n  \"payload\": {\n      \"Item\" : {\n\
                    \          \"userId\" : \"$context.identity.cognitoIdentityId\"\
                    ,\n          \"name\" : \"$inputRoot.name\",\n          \"surname\"\
                    \ : \"$inputRoot.surname\",\n          \"email\" : \"$inputRoot.email\"\
                    ,\n          \"provider\" : \"Cognito User Pools with Cognito\
                    \ Identity Federation\"\n          }\n  }\n}"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CognitoDemoFunction.Arn}/invocations
          /cip/info:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - myApiUsers: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestTemplates:
                  application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"\
                    operation\": \"echo\",\n  \"payload\": {\n      \"Item\" : {\n\
                    \          \"name\" : \"$context.authorizer.claims.given_name\"\
                    ,\n          \"surname\" : \"$context.authorizer.claims.family_name\"\
                    ,\n          \"email\" : \"$context.authorizer.claims.email\"\n\
                    \          \n          }\n  }\n}"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CognitoDemoFunction.Arn}/invocations
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: mock
          /cup:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - myApiUsers: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestTemplates:
                  application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"\
                    operation\": \"list\",\n  \"payload\":{    \n      \"FilterExpression\"\
                    \ : \"userId = :this_id\",\n      \"ExpressionAttributeValues\"\
                    \ : {\":this_id\" : \"$context.authorizer.claims.sub\"}\n    }\n\
                    }"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CognitoDemoFunction.Arn}/invocations
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''POST,GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: mock
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - myApiUsers: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestTemplates:
                  application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"\
                    operation\": \"create\",\n  \"payload\": {\n      \"Item\" : {\n\
                    \          \"userId\" : \"$context.authorizer.claims.sub\",\n\
                    \          \"name\" : \"$context.authorizer.claims.given_name\"\
                    ,\n          \"surname\" : \"$context.authorizer.claims.family_name\"\
                    ,\n          \"email\" : \"$context.authorizer.claims.email\"\
                    ,\n          \"provider\" : \"Cognito User Pools\"\n         \
                    \ }\n  }\n}"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CognitoDemoFunction.Arn}/invocations
          /google:
            get:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestTemplates:
                  application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"\
                    operation\": \"list\",\n  \"payload\":{    \n      \"FilterExpression\"\
                    \ : \"userId = :this_id\",\n      \"ExpressionAttributeValues\"\
                    \ : {\":this_id\" : \"$context.identity.cognitoIdentityId\"}\n\
                    \    }\n}"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CognitoDemoFunction.Arn}/invocations
            options:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              x-amazon-apigateway-integration:
                passthroughBehavior: when_no_match
                requestTemplates:
                  application/json: '{"statusCode": 200}'
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
                      method.response.header.Access-Control-Allow-Methods: '''POST,GET,OPTIONS'''
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: mock
            post:
              consumes:
              - application/json
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                  schema:
                    $ref: '#/definitions/Empty'
              security:
              - sigv4: []
              x-amazon-apigateway-integration:
                contentHandling: CONVERT_TO_TEXT
                httpMethod: POST
                passthroughBehavior: when_no_templates
                requestTemplates:
                  application/json: "#set($inputRoot = $input.path('$'))\n{\n  \"\
                    operation\": \"create\",\n  \"payload\": {\n      \"Item\" : {\n\
                    \          \"userId\" : \"$context.identity.cognitoIdentityId\"\
                    ,\n          \"name\" : \"$inputRoot.name\",\n          \"surname\"\
                    \ : \"$inputRoot.surname\",\n          \"email\" : \"$inputRoot.email\"\
                    ,\n          \"provider\": \"Google\"\n          }\n  }\n}"
                responses:
                  default:
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: '''*'''
                    statusCode: '200'
                type: aws
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CognitoDemoFunction.Arn}/invocations
        schemes:
        - https
        securityDefinitions:
          myApiUsers:
            in: header
            name: Authorization
            type: apiKey
            x-amazon-apigateway-authorizer:
              providerARNs:
              - Fn::Sub: ${CognitoUserPool.Arn}
              type: cognito_user_pools
            x-amazon-apigateway-authtype: cognito_user_pools
          sigv4:
            in: header
            name: Authorization
            type: apiKey
            x-amazon-apigateway-authtype: awsSigv4
        swagger: '2.0'
      StageName: demo
    Type: AWS::Serverless::Api
  CognitoDemoFunction:
    Properties:
      CodeUri: s3://edlima/lambda.zip
      Environment:
        Variables:
          TABLE_NAME:
            Ref: Table
      Events:
        CipGet:
          Properties:
            Method: GET
            Path: /cip
            RestApiId:
              Ref: CognitoDemoApi
          Type: Api
        CipInfoGet:
          Properties:
            Method: GET
            Path: /cip/info
            RestApiId:
              Ref: CognitoDemoApi
          Type: Api
        CipPost:
          Properties:
            Method: POST
            Path: /cip
            RestApiId:
              Ref: CognitoDemoApi
          Type: Api
        CupGet:
          Properties:
            Method: GET
            Path: /cup
            RestApiId:
              Ref: CognitoDemoApi
          Type: Api
        CupPost:
          Properties:
            Method: POST
            Path: /cup
            RestApiId:
              Ref: CognitoDemoApi
          Type: Api
        GoogleGet:
          Properties:
            Method: GET
            Path: /google
            RestApiId:
              Ref: CognitoDemoApi
          Type: Api
        GooglePost:
          Properties:
            Method: POST
            Path: /google
            RestApiId:
              Ref: CognitoDemoApi
          Type: Api
      Handler: index.handler
      Policies: AmazonDynamoDBFullAccess
      Runtime: nodejs4.3
    Type: AWS::Serverless::Function
  CognitoIdPool:
    Properties:
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
      - ClientId:
          Ref: CognitoUserPoolClient
        ProviderName:
          Fn::GetAtt:
          - CognitoUserPool
          - ProviderName
      IdentityPoolName:
        Ref: AWS::StackName
    Type: AWS::Cognito::IdentityPool
  CognitoUserPool:
    Properties:
      UserPoolName: CognitoAPIGWAngular
    Type: AWS::Cognito::UserPool
  CognitoUserPoolClient:
    Properties:
      ClientName: myApp
      GenerateSecret: false
      UserPoolId:
        Ref: CognitoUserPool
    Type: AWS::Cognito::UserPoolClient
  GoogleRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRoleWithWebIdentity
          Condition:
            ForAnyValue:StringLike:
              cognito-identity.amazonaws.com:amr:
              - authenticated
            StringEquals:
              cognito-identity.amazonaws.com:aud:
              - Ref: CognitoIdPool
          Effect: Allow
          Principal:
            Federated:
            - cognito-identity.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action: execute-api:Invoke
            Effect: Allow
            Resource:
            - Fn::Join:
              - /
              - - Fn::Join:
                  - ':'
                  - - arn:aws:execute-api
                    - Ref: AWS::Region
                    - Ref: AWS::AccountId
                    - Ref: CognitoDemoApi
                - '*/GET/google'
            - Fn::Join:
              - /
              - - Fn::Join:
                  - ':'
                  - - arn:aws:execute-api
                    - Ref: AWS::Region
                    - Ref: AWS::AccountId
                    - Ref: CognitoDemoApi
                - '*/POST/google'
          Version: '2012-10-17'
        PolicyName: CognitoAPIGWAngularGoogle
    Type: AWS::IAM::Role
  GoogleRoleAttach:
    Properties:
      IdentityPoolId:
        Ref: CognitoIdPool
      RoleMappings:
        cognito-idp.ap-southeast-2.amazonaws.com/ap-southeast-2_ZpTyldI5i:53m8l2bc88p4rqsdcjc694jj1c:
          AmbiguousRoleResolution: Deny
          Type: Token
      Roles:
        authenticated:
          Fn::GetAtt:
          - GoogleRole
          - Arn
    Type: AWS::Cognito::IdentityPoolRoleAttachment
  Table:
    Properties:
      AttributeDefinitions:
      - AttributeName: userId
        AttributeType: S
      KeySchema:
      - AttributeName: userId
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
    Type: AWS::DynamoDB::Table
Transform: AWS::Serverless-2016-10-31
